{"version":3,"sources":["../src/index.js"],"names":["axios","require","config","socket","process","env","SOCKET_URL","path","auth","key","SOCKET_KEY","on","console","log","FIRESTATION","emit","room","screenKey","SCREEN_KEY","clientId","m","notifyDevices","devices","JSON","parse","DEVICES","length","options","headers","username","DEVICE_USERNAME","password","DEVICE_PASSWORD","device","res","get","ip","name","turnOffDelay","data","has_timer","setTimeout","err","message"],"mappings":"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","sourcesContent":["import { io } from 'socket.io-client';\nconst axios = require('axios');\nrequire('dotenv').config();\n\n// check env values\nrequire('./envCheck')();\n\nconst socket = io(process.env.SOCKET_URL, {\n  path: '/fsas',\n  auth: { key: process.env.SOCKET_KEY },\n});\n// join fs room on connection\nsocket.on('connect', () => {\n  console.log('connected to socket server');\n  console.log(process.env.FIRESTATION);\n  socket.emit('joinFSRoom', {\n    room: process.env.FIRESTATION,\n    screenKey: process.env.SCREEN_KEY,\n    clientId: 'io-device-service',\n  });\n});\n\n// register on welcome messaage\nsocket.on('welcomeMsg', async (m) => {\n  console.log(m);\n  // send device id to the socket\n});\n\n// on received alarms\nsocket.on('newAlarm', async (m) => {\n  await notifyDevices();\n  console.log('Done with calling the on prem devices');\n});\n\n// on practice alarms\nsocket.on('practiceAlarm', async (m) => {\n  await notifyDevices();\n  console.log('Done with calling the on prem devices');\n});\n\n// function on missing connection\nsocket.on('fsNotFound', (m) => {\n  console.log(m);\n});\n\n// function on missing connection\nsocket.on('disconnect', () => {\n  console.log('disconnected');\n});\n\n// Function to toggle all on prem IoT devices on incoming alarm\nconst notifyDevices = async () => {\n  const devices = JSON.parse(process.env.DEVICES) || [];\n  if (devices.length < 1) {\n    console.log('No on prem devices specified');\n    return;\n  }\n  console.log(devices);\n\n  const options = {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    auth: {\n      username: process.env.DEVICE_USERNAME,\n      password: process.env.DEVICE_PASSWORD,\n    },\n  };\n\n  // call the turn on API to send IO signal. The device is set up so it turn off automatically after 1 second\n  // for a backup, we send turn off command if the device has lost the settings\n  for await (const device of devices) {\n    let res;\n    try {\n      res = await axios.get(\n        `http://${device.ip}/relay/0?turn=on`,\n        options,\n      );\n      console.log(`Finished activating device: ${device.name}`);\n      // console.log(res.data);\n\n      const turnOffDelay = device.turnOffDelay || 2000;\n\n      if (!res.data.has_timer) {\n        // timeout for x seconds before sending turn off signal if device has no timer set up\n        setTimeout(async () => {\n          console.log(`send off signal to ${device.name}`);\n          res = await axios.get(\n            `http://${device.ip}/relay/0?turn=off`,\n            options,\n          );\n        }, turnOffDelay);\n      }\n    } catch (err) {\n      console.log(`error: ${err.message}`);\n    }\n  }\n};\n"],"file":"index.js"}